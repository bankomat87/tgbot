import asyncio
from telegram import Update, InputFile
from telegram.ext import ContextTypes, ConversationHandler
from .keyboards import get_style_keyboard, ReplyKeyboardRemove
from .generator import ImageGenerator
from config import API_BASE_URL

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_STYLE, ENTERING_PROMPT = range(2)

generator = ImageGenerator()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    api_status, status_msg = await generator.check_api_status()
    
    message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Stable Diffusion.\n\n"
        f"{status_msg}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/render - –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API\n"
        "/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é"
    )
    
    await update.message.reply_text(message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/render - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ API\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "<b>–ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å\n"
        "2. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
        "3. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (1-3 –º–∏–Ω—É—Ç—ã)\n\n"
        "‚úèÔ∏è <i>–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–º–ø—Ç–∞:</i> <code>a beautiful sunset over mountains, digital art</code>"
    )
    await update.message.reply_text(help_text, parse_mode="HTML")

async def status_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API"""
    api_status, status_msg = await generator.check_api_status()
    emoji = "üü¢" if api_status else "üî¥"
    await update.message.reply_text(f"{emoji} {status_msg}")

async def render_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    api_status, status_msg = await generator.check_api_status()
    if not api_status:
        await update.message.reply_text(f"üî¥ {status_msg}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=get_style_keyboard()
    )
    return SELECTING_STYLE

async def style_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    if update.message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        return await cancel_operation(update, context)
    
    context.user_data['style'] = update.message.text
    await update.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {update.message.text}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:\n"
        "<i>–ü—Ä–∏–º–µ—Ä: \"a beautiful sunset over mountains, digital art\"</i>",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode="HTML"
    )
    return ENTERING_PROMPT

async def prompt_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    prompt = update.message.text
    style = context.user_data['style']
    
    status_msg = await update.message.reply_text(
        f"üîÑ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞:</b>\n"
        f"‚Ä¢ –°—Ç–∏–ª—å: {style}\n"
        f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {prompt}\n\n"
        "‚è≥ –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 1-3 –º–∏–Ω—É—Ç—ã...",
        parse_mode="HTML"
    )
    
    result = await generator.generate_image(prompt, style)
    
    if not result["success"]:
        await status_msg.edit_text(f"‚ùå <b>–û—à–∏–±–∫–∞:</b>\n{result['error']}", parse_mode="HTML")
        return ConversationHandler.END
    
    for i in range(1, 11):
        await asyncio.sleep(result["estimated_time"] / 10)
        image = await generator.get_image(result["task_id"])
        
        if image:
            await update.message.reply_photo(
                photo=InputFile(image, filename="generated.png"),
                caption=f"üéâ <b>–ì–æ—Ç–æ–≤–æ!</b>\n‚Ä¢ –°—Ç–∏–ª—å: {style}\n‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {prompt}",
                parse_mode="HTML"
            )
            await status_msg.delete()
            return ConversationHandler.END
        
        await status_msg.edit_text(
            f"üîÑ <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...</b> ({i*10}%)\n"
            f"‚Ä¢ –°—Ç–∏–ª—å: {style}\n"
            f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {prompt}",
            parse_mode="HTML"
        )
    
    await status_msg.edit_text("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    return ConversationHandler.END

async def cancel_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

async def handle_fallback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(
        "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é (/help) –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é (/cancel)",
        reply_markup=ReplyKeyboardRemove()
    )